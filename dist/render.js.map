{"version":3,"sources":["../libs/render.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;qBAgBwB,QAAQ;;sBAhBb,QAAQ;;;;uBACP,UAAU;;;;uBACV,WAAW;;;;AAE/B,IAAI,GAAG,GAAG,yBAAU,CAAA;AAYL,SAAS,QAAQ,CAAC,QAAQ,EAAE,IAAI,EAAE;AAC/C,SAAO,yBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,QAAI,CAAC,QAAQ,EACX,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAA;;AAErD,OAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CACf,IAAI,CAAC,UAAC,KAAK,EAAE,IAAI,EAAK;AACrB,UAAI,CAAC,KAAK,EACR,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAA;AACpD,UAAI,CAAC,KAAK,CAAC,aAAa,CAAC,EACvB,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAA;AACzD,UAAI,CAAC,IAAI,EACP,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAA;;AAErD,UAAM,MAAM,GAAG;AACb,YAAI,EAAE,KAAK,CAAC,aAAa,CAAC;OAC3B,CAAA;;;AAGD,UAAI,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;;;AAGrD,UAAI,CAAC,KAAK,GAAG,KAAK,CAAA;;;AAGlB,UAAI,UAAO,GAAG,KAAK,CAAC,KAAK,UAAO,CAAC,GAC/B,KAAK,UAAO,GACZ,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC;;AAEnB,UAAI;AACF,cAAM,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;OACtC,CAAC,OAAO,GAAG,EAAE;AACZ,eAAO,MAAM,CAAC,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAA;OACxD;;AAED,UAAI;AACF,YAAI,IAAI,GAAG,qBAAQ,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;OACvC,CAAC,OAAO,GAAG,EAAE;AACZ,eAAO,MAAM,CAAC,GAAG,CAAC,CAAA;OACnB;;;AAGD,UAAI,OAAO,IAAI,AAAC,KAAK,QAAQ,EAC3B,OAAO,MAAM,CAAC,IAAI,CAAC,CAAA;;AAErB,aAAO,OAAO,CAAC,IAAI,CAAC,CAAA;KACrB,CAAC,SACI,CAAC,MAAM,CAAC,CAAA;;AAEhB,aAAS,KAAK,CAAC,GAAG,EAAE;AAClB,aAAO,GAAG,KAAK,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA,AAAC,CAAA;KACxE;GACF,CAAC,CAAA;CACH","file":"libs/render.js","sourcesContent":["import pkghub from 'pkghub'\nimport Promise from 'bluebird'\nimport compile from './compile'\n\nlet hub = new pkghub\n\n/**\n*\n* A wrapper function for rendering html string by given template and data,\n* Support mutilple view engines.\n*\n* @param {String} [template] [template's short name]\n* @example\n*   exports.render('mails-flat/message', {...});\n*\n**/\nexport default function renderer(template, data) {\n  return new Promise((resolve, reject) => {\n    if (!template) \n      return reject(new Error('Template file not found'))\n\n    hub.load(template)\n      .then((theme, file) => {\n        if (!theme) \n          return reject(new Error('Theme module not found'))\n        if (!theme['view engine']) \n          return reject(new Error('Template engine is required'))\n        if (!file) \n          return reject(new Error('Template file not found'))\n\n        const engine = {\n          name: theme['view engine']\n        }\n\n        // Select the first file when template file does not exist.\n        var dest = file.exist ? file.dir : file.availables[0]\n\n        // Inject `Theme` locals\n        data.Theme = theme\n\n        // Replace #{static} in template with real public path.\n        data.static = isURI(theme.static) ? \n          theme.static : \n          '/' + theme.name;\n\n        try {\n          engine._engine = require(engine.name)\n        } catch (err) {\n          return reject(new Error('Template engine is required'))\n        }\n\n        try {\n          var html = compile(dest, data, engine)\n        } catch (err) {\n          return reject(err)\n        }\n\n        // Errors come from view engine\n        if (typeof(html) === 'object')\n          return reject(html)\n\n        return resolve(html)\n      })\n      .catch(reject)\n\n    function isURI(dir) {\n      return dir && (dir.indexOf('http') === 0 || dir.indexOf('https') === 0)\n    }\n  })\n}\n"]}